#looking at our raw data ----
head(penguins_raw)
#penguins_raw is a variable (object used to store values)
#we're looking at the first 6 rows of the dataset we're working with
#this helps us understand it's structure and check it has loaded as we expected
colnames(penguins_raw)
#preserving our raw data ----
#best practise to save a copy of the raw data, so we always can return to an unaltered copy
write.csv(penguins_raw, here("data", "penguins_raw.csv"))
#first, load a copy of the raw data into r to work with
penguins_raw <- read.csv(here("data", "penguins_raw.csv"))
#we loaded the function when we opened the relevant libraries
colnames(penguins_raw)
penguins_column_clean <- clean_column_names(penguins_raw) #calling the clean_column_names function loaded in from cleaningfunction script on the penguins_raw data,
#puts the output into penguins_column_clean to avoid overwrititng
colnames(penguins_column_clean)
penguins_cleaned <- complete_clean(penguins_raw)
colnames(penguins_cleaned)
#should then save the cleaned data:
write.csv(penguins_cleaned, here("data", "penguins_cleaned.csv"))
#importing the clean data ----
penguins_clean <- read.csv(here("data", "penguins_cleaned.csv"))
#subsetting data by column ----
#we often want to subset data for plotting or analysis
#e.g. if we only want to look at species and body mass
species_body_mass_data <- penguins_clean %>% select(c("species", "body_mass_g"))
head(species_body_mass_data)
#or could just remove na from species and body mass columns
species_body_mass_with_na <- penguins_column_clean %>%
select(c("species", "body_mass_g"))
head(species_body_mass_with_na)
species_body_mass_na_omit <- penguins_column_clean %>%
select(c("species", "body_mass_g")) %>%
na.omit()
head(species_body_mass_na_omit)
#subsetting by specific value ----
adelie_data <- subset(penguins_clean, species == "Adelie")
#can subset to get just certain columns for specific values
#e.g. just body mass and species for adelie penguins only
adelie_body_mass <- penguins_clean[penguins_clean$species == "Adelie", c("species", "body_mass_g")]
adelie_body_mass
renv::diagnostics()
renv::snapshot()
#initialising renv ----
renv::init()
library(tidyverse)
library(palmerpenguins)
library(here)
library(janitor)
library(modelsummary)
library(ggplot)
library(ggplot2)
source(here("functions", "cleaningfunction.R"))
renv::snapshot()
#looking at our raw data ----
head(penguins_raw)
#penguins_raw is a variable (object used to store values)
#we're looking at the first 6 rows of the dataset we're working with
#this helps us understand it's structure and check it has loaded as we expected
colnames(penguins_raw)
#preserving our raw data ----
#best practise to save a copy of the raw data, so we always can return to an unaltered copy
write.csv(penguins_raw, here("data", "penguins_raw.csv"))
#first, load a copy of the raw data into r to work with
penguins_raw <- read.csv(here("data", "penguins_raw.csv"))
#we loaded the function when we opened the relevant libraries
colnames(penguins_raw)
penguins_column_clean <- clean_column_names(penguins_raw) #calling the clean_column_names function loaded in from cleaningfunction script on the penguins_raw data,
#puts the output into penguins_column_clean to avoid overwrititng
colnames(penguins_column_clean)
penguins_cleaned <- complete_clean(penguins_raw)
colnames(penguins_cleaned)
#should then save the cleaned data:
write.csv(penguins_cleaned, here("data", "penguins_cleaned.csv"))
#importing the clean data ----
penguins_clean <- read.csv(here("data", "penguins_cleaned.csv"))
#boxplot ----
flipper_boxplot <- ggplot(
data = penguins_cleaned,
aes(x= species,
y = flippter_length_mm))
flipper_boxplot
#boxplot ----
flipper_boxplot <- ggplot(
data = penguins_cleaned,
aes(x= species,
y = flippter_length_mm)) + #acts like a pipe!
geom_boxplot() #make a box plot
flipper_boxplot
#boxplot ----
flipper_boxplot <- ggplot(
data = penguins_cleaned,
aes(x= species,
y = flippter_length_mm)) +
geom_boxplot()
#boxplot ----
flipper_boxplot <- ggplot(
data = penguins_cleaned,
aes(x= species,
y = flippter_length_mm)) +
geom_boxplot()
#boxplot ----
flipper_boxplot <- ggplot(
data = penguins_cleaned,
aes(x= species,
y = flippter_length_mm)) +  geom_boxplot()
#make a box plot
flipper_boxplot
#boxplot ----
flipper_boxplot <- ggplot(
data = penguins_cleaned,
aes(x= species,
y = flipper_length_mm)) +  geom_boxplot()
#make a box plot
flipper_boxplot
#get errors if we have NA values.
#should subset columns THEN remove NA values from only the columns we are interested in - deleting all NA would delete rows that are actually complete for all the data of interest
penguins_flippers <- select(penguins_cleaned, c("species", "flipper_length_mm")
#get errors if we have NA values.
#should subset columns THEN remove NA values from only the columns we are interested in - deleting all NA would delete rows that are actually complete for all the data of interest
penguins_flippers <- select(penguins_cleaned, c("species", "flipper_length_mm"))
penguins_flippers <- select(penguins_cleaned, c("species", "flipper_length_mm"))
colnames(penguins_flippers)
#removes NAs
penguins_flippers_no_na <- drop_na(penguins_flippers)
penguins_flippers <- penguins_cleaned %>%
select(penguins_cleaned, c("species", "flipper_length_mm")) %>%
drop_na()
penguins_flippers <- penguins_cleaned %>%
select("species", "flipper_length_mm") %>%
drop_na()
colnames(penguins_flippers)
head(penguins_flippers)
View(penguins_flippers_no_na)
View(penguins_flippers_no_na)
#plotting graph without NA values
flipper_boxplot <- ggplot(
data = penguins_flippers,
aes(x= species,
y = flipper_length_mm)) +#acts like a pipe!
geom_boxplot()
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers,
aes(x= species,
y = flipper_length_mm)) +#acts like a pipe!
geom_boxplot()
#boxplot ----
flipper_boxplot <- ggplot(
data = penguins_cleaned,
aes(x= species,
y = flipper_length_mm)) +#acts like a pipe!
geom_boxplot()
#make a box plot
flipper_boxplot
#make a box plot
flipper_boxplot_no_na
#boxplot ----
flipper_boxplot <- ggplot(
data = penguins_cleaned,
aes(x= species,
y = flipper_length_mm)) +#acts like a pipe!
geom_boxplot()
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers,
aes(x= species,
y = flipper_length_mm)) + #acts like a pipe!
geom_boxplot(aes(color = species)) #color by species
#make a box plot
flipper_boxplot_no_na
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers,
aes(x= species,
y = flipper_length_mm)) + #acts like a pipe!
geom_boxplot(aes(color = species)
show.legend = F) #color by species
#make a box plot
flipper_boxplot_no_na
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers,
aes(x= species,
y = flipper_length_mm)) + #acts like a pipe!
geom_boxplot(aes(color = species) #color by species
show.legend = F)
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers,
aes(x= species,
y = flipper_length_mm)) + #acts like a pipe!
geom_boxplot(aes(color = species), #color by species
show.legend = F)
#make a box plot
flipper_boxplot_no_na
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers, #what data should we use
aes(x= species,
y = flipper_length_mm)) + #acts like a pipe!
geom_boxplot(aes(color = species), #color by species
show.legend = F) +
geom_jitter()
#make a box plot
flipper_boxplot_no_na
flipper_boxplot_no_na
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers, #what data should we use
aes(x= species,
y = flipper_length_mm)) + #acts like a pipe!
geom_boxplot(aes(color = species), #color by species
show.legend = F) +
geom_jitter(aes(color = species),
show.legend = F,
position = position_jitter(
width = 0.2, #width across points for a sp are plotted
seed = 0 ) #removes random element
)) #adds data points to the plot
#so for reproducibility
flipper_boxplot_no_na
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers, #what data should we use
aes(x= species,
y = flipper_length_mm)) + #acts like a pipe!
geom_boxplot(aes(color = species), #color by species
show.legend = F) +
geom_jitter(aes(color = species),
show.legend = F,
position = position_jitter(
width = 0.2, #width across points for a sp are plotted
seed = 0 ) #removes random element
) #adds data points to the plot
#so for reproducibility
flipper_boxplot_no_na
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers, #what data should we use
aes(x= species,
y = flipper_length_mm)) + #acts like a pipe!
geom_boxplot(aes(color = species), #color by species
show.legend = F) +
geom_jitter(aes(color = species),
show.legend = F,
position = position_jitter(
width = 0.2, #width across points for a sp are plotted
seed = 0 ) #removes random element
) #adds data points to the plot
#so for reproducibility
flipper_boxplot_no_na
alpha = 0.3 #alpha denotes transparency)
width = 0.2, #width across points for a sp are plotted
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers, #what data should we use
aes(x= species,
y = flipper_length_mm)) + #acts like a pipe!
geom_boxplot(aes(color = species), #color by species
show.legend = F) +
geom_jitter(aes(color = species),
show.legend = F,
position = position_jitter(
width = 0.2, #width across points for a sp are plotted
seed = 0, #removes random element - points will plot in same place each time
alpha = 0.3) #alpha denotes transparency)
) #adds data points to the plot
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers, #what data should we use
aes(x= species,
y = flipper_length_mm)) + #acts like a pipe!
geom_boxplot(aes(color = species), #color by species
show.legend = F) +
geom_jitter(aes(color = species, alpha = 0.3), #alpha denotes transparency
show.legend = F,
position = position_jitter(
width = 0.2, #width across points for a sp are plotted
seed = 0, #removes random element - points will plot in same place each time
)
) #adds data points to the plot
#so for reproducibility
flipper_boxplot_no_na
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers, #what data should we use
aes(x= species,
y = flipper_length_mm)) + #acts like a pipe!
geom_boxplot(aes(color = species), #color by species
show.legend = F) +
geom_jitter(aes(color = species, alpha = 0.3), #alpha denotes transparency
show.legend = F,
position = position_jitter(
width = 0.2, #width across points for a sp are plotted
seed = 0, #removes random element - points will plot in same place each time
) +
labs(x= "Species", y = "Flipper length (mm)")
) #adds data points to the plot
#so for reproducibility
flipper_boxplot_no_na
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers, #what data should we use
aes(x= species,
y = flipper_length_mm)) + #acts like a pipe!
geom_boxplot(aes(color = species), #color by species
show.legend = F) +
geom_jitter(aes(color = species, alpha = 0.3), #alpha denotes transparency
show.legend = F,
position = position_jitter(
width = 0.2, #width across points for a sp are plotted
seed = 0, #removes random element - points will plot in same place each time
) +
labs(x= "Species", y = "Flipper length (mm)")
) #adds data points to the plot
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers, #what data should we use
aes(x= species,
y = flipper_length_mm)) + #acts like a pipe!
geom_boxplot(aes(color = species), #color by species
show.legend = F) +
geom_jitter(aes(color = species, alpha = 0.3), #alpha denotes transparency
show.legend = F,
position = position_jitter(
width = 0.2, #width across points for a sp are plotted
seed = 0, #removes random element - points will plot in same place each time
)
) + #adds data points to the plot
labs(x= "Species", y = "Flipper length (mm)")
#so for reproducibility
flipper_boxplot_no_na
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers, #what data should we use
aes(x= species,
y = flipper_length_mm)) + #acts like a pipe!
geom_boxplot(aes(color = species), #color by species
show.legend = F) +
geom_jitter(aes(color = species, alpha = 0.3), #alpha denotes transparency
show.legend = F,
position = position_jitter(
width = 0.2, #width across points for a sp are plotted
seed = 0, #removes random element - points will plot in same place each time
)) + #adds data points to the plot
labs(x= "Species", y = "Flipper length (mm)")
#geom_jitter = random, when you run it the location of the plots changes (not reproducible)
#gives each point a random x value w/in a certain width. [missed] about a random seed
#seed = 0 does use a random number for the x location of each point, but does it in a reproducible way? not sure
flipper_boxplot_no_na
#when you do aes(color = species) you can't choose the colours yourself (and therefore they may be colour blind unfriendly)
#so we map the color we want for each species
species_colours <- c("Adelie" = "darkorange",
species_colours
#when you do aes(color = species) you can't choose the colours yourself (and therefore they may be colour blind unfriendly)
#so we map the color we want for each species
species_colours <- c("Adelie" = "darkorange",
species_colours <- c("Adelie" = "darkorange",
"Chinstrap" = "purple",
"Gentoo" = "cyan4")
species_colours <- c("Adelie" = "darkorange",
"Chinstrap" = "purple",
"Gentoo" = "cyan4") #mapping the colours ensures that the colours are consistent regardless of the order of the species in the data set (A list of colours would just assign in order of apperance for each data set )
scale_color_manual(values = species_colours) _
labs(x= "Species", y = "Flipper length (mm)")
#geom_jitter = random, when you run it the location of the plots changes (not reproducible)
#gives each point a random x value w/in a certain width. [missed] about a random seed
#seed = 0 does use a random number for the x location of each point, but does it in a reproducible way? not sure
flipper_boxplot_no_na
geom_jitter(alpha = 0.3), #alpha denotes transparency
geom_jitter(alpha = 0.3), #alpha denotes transparency
geom_jitter(alpha = 0.3), #alpha denotes transparency
geom_jitter((alpha = 0.3), #alpha denotes transparency
show.legend = F,
position = position_jitter(
width = 0.2, #width across points for a sp are plotted
seed = 0, #removes random element - points will plot in same place each time
)) + #adds data points to the plot
scale_color_manual(values = species_colours) +
labs(x= "Species", y = "Flipper length (mm)")
geom_jitter(aes(alpha = 0.3), #alpha denotes transparency
show.legend = F,
position = position_jitter(
width = 0.2, #width across points for a sp are plotted
seed = 0, #removes random element - points will plot in same place each time
)) + #adds data points to the plot
scale_color_manual(values = species_colours) +
labs(x= "Species", y = "Flipper length (mm)")
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers, #what data should we use
aes(x= species,
y = flipper_length_mm)) + #acts like a pipe!
geom_boxplot() +
geom_jitter(aes(alpha = 0.3), #alpha denotes transparency
show.legend = F,
position = position_jitter(
width = 0.2, #width across points for a sp are plotted
seed = 0, #removes random element - points will plot in same place each time
)) + #adds data points to the plot
scale_color_manual(values = species_colours) +
labs(x= "Species", y = "Flipper length (mm)")
#geom_jitter = random, when you run it the location of the plots changes (not reproducible)
#gives each point a random x value w/in a certain width. [missed] about a random seed
#seed = 0 does use a random number for the x location of each point, but does it in a reproducible way? not sure
flipper_boxplot_no_na
species_colours <- c(c("Adelie" = "darkorange"),
c("Chinstrap" = "purple"),
c("Gentoo" = "cyan4")) #mapping the colours ensures that the colours are consistent regardless of the order of the species in the data set (A list of colours would just assign in order of apperance for each data set )
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers, #what data should we use
aes(x= species,
y = flipper_length_mm))
geom_boxplot() +
geom_jitter(aes(alpha = 0.3), #alpha denotes transparency
show.legend = F,
position = position_jitter(
width = 0.2, #width across points for a sp are plotted
seed = 0, #removes random element - points will plot in same place each time
)) + #adds data points to the plot
scale_color_manual(values = species_colours) +
labs(x= "Species", y = "Flipper length (mm)")
species_colours <- c("Adelie" = "darkorange",
"Chinstrap" = "purple",
"Gentoo" = "cyan4") #mapping the colours ensures that the colours are consistent regardless of the order of the species in the data set (A list of colours would just assign in order of apperance for each data set )
geom_boxplot() +
geom_jitter(aes(alpha = 0.3), #alpha denotes transparency
show.legend = F,
position = position_jitter(
width = 0.2, #width across points for a sp are plotted
seed = 0, #removes random element - points will plot in same place each time
)) + #adds data points to the plot
scale_color_manual(values = species_colours) +
theme_bw()
geom_boxplot() +
geom_jitter(aes(alpha = 0.3), #alpha denotes transparency
show.legend = F,
position = position_jitter(
width = 0.2, #width across points for a sp are plotted
seed = 0, #removes random element - points will plot in same place each time
)) + #adds data points to the plot
scale_color_manual(values = species_colours) +
theme_bw() +
labs(x= "Species", y = "Flipper length (mm)")
geom_boxplot(aes(color = species),
width = 0.3,
show.legend = F) +
geom_jitter(aes(color = species), alpha = 0.3), #alpha denotes transparency
#geom_jitter = random, when you run it the location of the plots changes (not reproducible)
#gives each point a random x value w/in a certain width. [missed] about a random seed
#seed = 0 does use a random number for the x location of each point, but does it in a reproducible way? not sure
# + acts like a pipe!
flipper_boxplot_no_na
geom_boxplot() +
geom_jitter(aes(color = species), alpha = 0.3), #alpha denotes transparency
#geom_jitter = random, when you run it the location of the plots changes (not reproducible)
#gives each point a random x value w/in a certain width. [missed] about a random seed
#seed = 0 does use a random number for the x location of each point, but does it in a reproducible way? not sure
# + acts like a pipe!
flipper_boxplot_no_na
geom_boxplot() +
geom_jitter(aes(color = species), alpha = 0.3), #alpha denotes transparency
#geom_jitter = random, when you run it the location of the plots changes (not reproducible)
#gives each point a random x value w/in a certain width. [missed] about a random seed
#seed = 0 does use a random number for the x location of each point, but does it in a reproducible way? not sure
# + acts like a pipe!
flipper_boxplot_no_na
geom_boxplot(aes(color = species),
width = 0.3,
show.legend = F) +
geom_jitter(aes(color = species), alpha = 0.3), #alpha denotes transparency
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers, #what data should we use
aes(x= species,
y = flipper_length_mm))
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers,
aes(x= species,
y = flipper_length_mm)) +
geom_boxplot(aes(color = species),
width = 0.3,
show.legend = F) +
geom_jitter(aes(color = species), alpha = 0.3), #alpha denotes transparency
#plotting graph without NA values
flipper_boxplot_no_na <- ggplot(
data = penguins_flippers,
aes(x= species,
y = flipper_length_mm)) +
geom_boxplot(aes(color = species),
width = 0.3,
show.legend = F) +
geom_jitter(aes(color = species),
alpha = 0.3, #alpha denotes transparency
show.legend = F,
position = position_jitter(
width = 0.2, #width across points for a sp are plotted
seed = 0, #removes random element - points will plot in same place each time
)) + #adds data points to the plot
scale_color_manual(values = species_colours) +
theme_bw() +
labs(x= "Species", y = "Flipper length (mm)")
#geom_jitter = random, when you run it the location of the plots changes (not reproducible)
#gives each point a random x value w/in a certain width. [missed] about a random seed
#seed = 0 does use a random number for the x location of each point, but does it in a reproducible way? not sure
# + acts like a pipe!
flipper_boxplot_no_na
git remote add origin https://github.com/freya-cook/penguinproject.git
git remote add origin https://github.com/freya-cook/penguinproject.git
